{
  "contract_name": "sg83-base",
  "contract_version": "1.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "fee_burn_info",
      "params"
    ],
    "properties": {
      "fee_burn_info": {
        "$ref": "#/definitions/FairBurnInfo"
      },
      "params": {
        "$ref": "#/definitions/RegistryParams_for_Empty"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "FairBurnInfo": {
        "type": "object",
        "required": [
          "developer_addr",
          "fair_burn_addr"
        ],
        "properties": {
          "developer_addr": {
            "$ref": "#/definitions/Addr"
          },
          "fair_burn_addr": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "RegistryParams_for_Empty": {
        "type": "object",
        "required": [
          "allowed_sg82_code_ids",
          "creation_fees",
          "extension",
          "managers"
        ],
        "properties": {
          "allowed_sg82_code_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "creation_fees": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "extension": {
            "$ref": "#/definitions/Empty"
          },
          "managers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Update the owner of a token-bound account",
        "type": "object",
        "required": [
          "update_account_ownership"
        ],
        "properties": {
          "update_account_ownership": {
            "type": "object",
            "required": [
              "token_info"
            ],
            "properties": {
              "new_account_data": {
                "description": "New account data of the account used for (cw81 signature verification)",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "token_info": {
                "description": "Non-Fungible Token Info that the existing account is linked to",
                "allOf": [
                  {
                    "$ref": "#/definitions/TokenInfo"
                  }
                ]
              },
              "update_for": {
                "description": "Admin only parameter to update the account on behalf of another user that holds the token",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Create a new token-bound account. Access the old one will be forever lost",
        "type": "object",
        "required": [
          "reset_account"
        ],
        "properties": {
          "reset_account": {
            "$ref": "#/definitions/CreateAccountMsg_for_CreateAccountPayload_for_Binary"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Migrate an account to the newer code version if the code id is allowed",
        "type": "object",
        "required": [
          "migrate_account"
        ],
        "properties": {
          "migrate_account": {
            "type": "object",
            "required": [
              "msg",
              "new_code_id",
              "token_info"
            ],
            "properties": {
              "msg": {
                "description": "Migration message to be passed to the account contract",
                "allOf": [
                  {
                    "$ref": "#/definitions/MigrateAccountMsg_for_Empty"
                  }
                ]
              },
              "new_code_id": {
                "description": "New code id to migrate the account to",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "token_info": {
                "description": "Non-Fungible Token Info that the existing account is linked to",
                "allOf": [
                  {
                    "$ref": "#/definitions/TokenInfo"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_account"
        ],
        "properties": {
          "create_account": {
            "$ref": "#/definitions/CreateAccountMsg_for_CreateAccountPayload_for_Binary"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CreateAccountMsg_for_CreateAccountPayload_for_Binary": {
        "type": "object",
        "required": [
          "chain_id",
          "code_id",
          "msg"
        ],
        "properties": {
          "chain_id": {
            "type": "string"
          },
          "code_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "msg": {
            "$ref": "#/definitions/CreateAccountPayload_for_Binary"
          }
        },
        "additionalProperties": false
      },
      "CreateAccountPayload_for_Binary": {
        "description": "An extenstion for [cw83::CreateAccountMsg]",
        "type": "object",
        "required": [
          "account_data",
          "token_info"
        ],
        "properties": {
          "account_data": {
            "description": "Account data used for (cw81 signature verification)",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "create_for": {
            "type": [
              "string",
              "null"
            ]
          },
          "token_info": {
            "description": "Non-Fungible Token Info that the created account will be linked to",
            "allOf": [
              {
                "$ref": "#/definitions/TokenInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "MigrateAccountMsg_for_Empty": {
        "type": "object",
        "properties": {
          "params": {
            "anyOf": [
              {
                "$ref": "#/definitions/Empty"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TokenInfo": {
        "type": "object",
        "required": [
          "collection",
          "id"
        ],
        "properties": {
          "collection": {
            "description": "Contract address of the collection",
            "type": "string"
          },
          "id": {
            "description": "Token id",
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Query all accounts in the registry in descending order",
        "type": "object",
        "required": [
          "accounts"
        ],
        "properties": {
          "accounts": {
            "type": "object",
            "properties": {
              "limit": {
                "description": "Limit how many accounts to return",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "skip": {
                "description": "Number of accounts to skip [NOTE]: Not same as `start_after`",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query accounts linked to a token of a specific collection in descending order",
        "type": "object",
        "required": [
          "collection_accounts"
        ],
        "properties": {
          "collection_accounts": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "description": "Contract address of the collection",
                "type": "string"
              },
              "limit": {
                "description": "Limit how many accounts to return",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "skip": {
                "description": "Number of accounts to skip",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query all the collections the registry is aware of",
        "type": "object",
        "required": [
          "collections"
        ],
        "properties": {
          "collections": {
            "type": "object",
            "properties": {
              "limit": {
                "description": "Limit how many collections to return",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "skip": {
                "description": "Number of collections to skip",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query params of the registry",
        "type": "object",
        "required": [
          "registry_params"
        ],
        "properties": {
          "registry_params": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "account_info"
        ],
        "properties": {
          "account_info": {
            "$ref": "#/definitions/AccountQuery_for_TokenInfo"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountQuery_for_TokenInfo": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "$ref": "#/definitions/TokenInfo"
          }
        },
        "additionalProperties": false
      },
      "TokenInfo": {
        "type": "object",
        "required": [
          "collection",
          "id"
        ],
        "properties": {
          "collection": {
            "description": "Contract address of the collection",
            "type": "string"
          },
          "id": {
            "description": "Token id",
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "account_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountInfoResponse_for_Empty",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "info": {
          "anyOf": [
            {
              "$ref": "#/definitions/Empty"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        }
      }
    },
    "accounts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountsResponse",
      "type": "object",
      "required": [
        "accounts",
        "total"
      ],
      "properties": {
        "accounts": {
          "description": "List of the accounts matching the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "total": {
          "description": "Total number of accounts in the registry",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Account": {
          "description": "An full account stored in the registry",
          "type": "object",
          "required": [
            "address",
            "collection",
            "id"
          ],
          "properties": {
            "address": {
              "description": "Address of the token-bound account",
              "type": "string"
            },
            "collection": {
              "description": "Contract address of the collection",
              "type": "string"
            },
            "id": {
              "description": "Token id",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "collection_accounts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionAccountsResponse",
      "type": "object",
      "required": [
        "accounts",
        "total"
      ],
      "properties": {
        "accounts": {
          "description": "List of the accounts matching the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollectionAccount"
          }
        },
        "total": {
          "description": "Total number of accounts of a specific collection",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "CollectionAccount": {
          "description": "An entry without collection address",
          "type": "object",
          "required": [
            "address",
            "id"
          ],
          "properties": {
            "address": {
              "description": "Address of the token-bound account",
              "type": "string"
            },
            "id": {
              "description": "Token id",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "collections": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionsResponse",
      "description": "A List of the collections registered in the registry",
      "type": "object",
      "required": [
        "collections"
      ],
      "properties": {
        "collections": {
          "description": "Contract addresses of each collections",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "registry_params": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RegistryParams_for_Empty",
      "type": "object",
      "required": [
        "allowed_sg82_code_ids",
        "creation_fees",
        "extension",
        "managers"
      ],
      "properties": {
        "allowed_sg82_code_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "creation_fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "extension": {
          "$ref": "#/definitions/Empty"
        },
        "managers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
